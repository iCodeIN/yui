name: Run test, lint check and deploy

on:
  - push
  - pull_request

jobs:
  works:
    name: Works
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: kirito
          POSTGRES_PASSWORD: eugeo
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      memcached:
        image: memcached
        ports:
          - 11211:11211

    steps:
      # Set-up
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      - name: Install Poetry
        uses: snok/install-poetry@v1.1.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      # Install Depencencies
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install --no-ansi --no-interaction
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      # Lint
      - name: Check coding convention
        run: |
          source .venv/bin/activate
          poetry run flake8
      - name: Check missing autofix
        run: |
          source .venv/bin/activate
          poetry run black --check .

      # Test
      - name: Run test cases
        run: |
          source .venv/bin/activate
          poetry run pytest -v --cov yui tests
        env:
          YUI_TEST_DATABASE_URL: postgresql://kirito:eugeo@localhost/test
          AQI_API_TOKEN: ${{ secrets.TEST_AQI_API_TOKEN }}
          GOOGLE_API_KEY: ${{ secrets.TEST_GOOGLE_API_KEY }}
          NAVER_CLIENT_ID: ${{ secrets.TEST_NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.TEST_NAVER_CLIENT_SECRET }}
